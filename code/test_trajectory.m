%function [xtraj, ttraj, terminate_cond] = test_trajectory(start, stop, vis)
% TEST_TRAJECTORY simulates the robot from START to STOP following a PATH
% that's been planned for MAP.
% start - a 3d vector or a cell contains multiple 3d vectors
% stop  - a 3d vector or a cell contains multiple 3d vectors
% map   - map generated by your load_map
% path  - n x 3 matrix path planned by your dijkstra algorithm
% vis   - true for displaying visualization

% Setup
start = num2cell(W(:,:,1),2);
stop = num2cell(W(:,:,end),2);
vis = true;

[rx, ry, rz] = ellipsoid(0,0,0,R(1),R(2),R(3),20);

% Write video
term_count = 60;

if save_vid
    vid1 = VideoWriter('C-CAPT_quad.avi');
    vid1.FrameRate = 20;
    vid1.Quality = 98;
    open(vid1);
end

%Controller and trajectory generator handles
controlhandle = @controller;
trajhandle    = @trajectory_generator;

% Make cell
if ~iscell(start), start = {start}; end
if ~iscell(stop),  stop  = {stop}; end

% Get nquad
nquad = length(start);

% Make column vector
for qn = 1:nquad
    start{qn} = start{qn}(:);
    stop{qn} = stop{qn}(:);
end

% Quadrotor model
params = nanoplus();

%% **************************** FIGURES *****************************
% Environment figure
if nargin < 3
    vis = true;
end

fprintf('Initializing figures...\n')
h_fig = gcf;
if vis
    set(h_fig,'Name', 'Environment');
else
    set(h_fig, 'Name', 'Environment', 'Visible', 'Off');
end
h_3d = gca;
drawnow;
xlabel('x [m]'); ylabel('y [m]'); zlabel('z [m]')
quadcolors = lines(nquad);
set(gcf,'Renderer','OpenGL')

%% *********************** INITIAL CONDITIONS ***********************
fprintf('Setting initial conditions...\n')
% Maximum time that the quadrotor is allowed to fly
time_tol = 50;          % maximum simulation time
starttime = 0;          % start of simulation in seconds
tstep     = 0.01;       % this determines the time step at which the solution is given
cstep     = 0.05;       % image capture time interval
nstep     = cstep/tstep;
time      = starttime;  % current time
max_iter  = time_tol / cstep;      % max iteration
for qn = 1:nquad
    % Get start and stop position
    x0{qn}    = init_state( start{qn} ); % Justin's edits
    xtraj{qn} = zeros(max_iter*nstep, length(x0{qn}));
    ttraj{qn} = zeros(max_iter*nstep, 1);
end

% Maximum position error of the quadrotor at goal
pos_tol  = 0.05; % m
% Maximum speed of the quadrotor at goal
vel_tol  = 0.05; % m/s

x = x0;        % state

%% ************************* RUN SIMULATION *************************
fprintf('Simulation Running....\n')
for iter = 1:max_iter
    timeint = time:tstep:time+cstep;
    tic;
    % Iterate over each quad
    for qn = 1:nquad
        % Initialize quad plot
        if iter == 1
            QP{qn} = QuadPlot(qn, x0{qn}, 0.1, 0.04, quadcolors(qn,:),max_iter, h_3d);
            desired_state = trajhandle(time, qn);
            QP{qn}.UpdateQuadPlot(x{qn}, [desired_state.pos; desired_state.vel], time);
            h_title = title(sprintf('iteration: %d, time: %4.2f', iter, time));
            
            hold on
            bubble{qn} = surf(rx + x{qn}(1), ry + x{qn}(2), rz + x{qn}(3), ...
                'facecolor', [0,.5,1], 'facealpha', 0.2, 'edgealpha', 0);
            hold off
        end

        % Run simulation
        [tsave, xsave] = ode45(@(t,s) quadEOM(t, s, qn, controlhandle, trajhandle, params), timeint, x{qn});
        x{qn} = xsave(end, :)';
        % Save to traj
        xtraj{qn}((iter-1)*nstep+1:iter*nstep,:) = xsave(1:end-1,:);
        ttraj{qn}((iter-1)*nstep+1:iter*nstep)   = tsave(1:end-1);

        % Update quad plot
        desired_state = trajhandle(time + cstep, qn);
        QP{qn}.UpdateQuadPlot(x{qn}, [desired_state.pos; desired_state.vel], time + cstep);
        
        set(bubble{qn},'xdata', x{qn}(1) + rx, ...
            'ydata', x{qn}(2) + ry, ...
            'zdata', x{qn}(3) + rz);
        
    end

    set(h_title, 'String', sprintf('iteration: %d, time: %4.2f', iter, time + cstep))
    time = time + cstep; % Update simulation time
    t = toc;
    
    cam_pos = get(gca,'cameraposition')';
    cr = 0.01;
    cam_pos = [cos(cr), sin(cr), 0; -sin(cr), cos(cr), 0; 0, 0, 1]*cam_pos;
    set(gca,'cameraposition',cam_pos);

    drawnow
    
    % Write video
    if save_vid
        print(h_fig,'-dpng','telem_vid_frame1.png','-r0');
        F1 = imread('telem_vid_frame1.png');
        writeVideo(vid1, F1);
    end
    
    % Pause to make real-time
    if (t < cstep)
        pause(cstep - t);
    end

    % Check termination criteria
    terminate_cond = terminate_check(x, time, stop, pos_tol, vel_tol, time_tol);
    if terminate_cond
        for ii = 1:term_count
            cam_pos = get(gca,'cameraposition')';
            cam_pos = [cos(cr), sin(cr), 0; -sin(cr), cos(cr), 0; 0, 0, 1]*cam_pos;
            set(gca,'cameraposition',cam_pos);

            drawnow

            % Write video
            if save_vid
                print(h_fig,'-dpng','telem_vid_frame1.png','-r0');
                F1 = imread('telem_vid_frame1.png');
                writeVideo(vid1, F1);
            end
        end
        
        break
    end

end

if save_vid
	close(vid1);
end

fprintf('Simulation Finished....\n')

%% ************************* POST PROCESSING *************************
% Truncate xtraj and ttraj
for qn = 1:nquad
    xtraj{qn} = xtraj{qn}(1:iter*nstep,:);
    ttraj{qn} = ttraj{qn}(1:iter*nstep);
end

% Plot the saved position and velocity of each robot
if vis
    for qn = 1:nquad
        % Truncate saved variables
        QP{qn}.TruncateHist();
        % Plot position for each quad
        h_pos{qn} = figure('Name', ['Quad ' num2str(qn) ' : position']);
        plot_state(h_pos{qn}, QP{qn}.state_hist(1:3,:), QP{qn}.time_hist, 'pos', 'vic');
        plot_state(h_pos{qn}, QP{qn}.state_des_hist(1:3,:), QP{qn}.time_hist, 'pos', 'des');
        % Plot velocity for each quad
        h_vel{qn} = figure('Name', ['Quad ' num2str(qn) ' : velocity']);
        plot_state(h_vel{qn}, QP{qn}.state_hist(4:6,:), QP{qn}.time_hist, 'vel', 'vic');
        plot_state(h_vel{qn}, QP{qn}.state_des_hist(4:6,:), QP{qn}.time_hist, 'vel', 'des');
    end
end

